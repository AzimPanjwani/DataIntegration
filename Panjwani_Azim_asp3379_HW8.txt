-- Merging with ETL 


-- 2
CREATE TABLE student_dw
(
    student_eid         VARCHAR(10),
    first_name          VARCHAR(50),
    last_name           VARCHAR(50),
    classification      CHAR(1),
    birthdate           DATE,
    email               VARCHAR(50),
    phone               VARCHAR(12),
    address             VARCHAR(50),
    city                VARCHAR(20),
    state               VARCHAR(20),
    zip                 VARCHAR(5),
    GPA                 NUMBER(3,2),
    data_source         VARCHAR(3),
    constraint  pk_eid_source  primary key (student_eid, data_source)
);

-- 3
CREATE OR REPLACE VIEW SFA_Student_View AS
    SELECT jackeid as student_eid, student_first_name as first_name, student_last_name as last_name, classification, DOB as birthdate, 
           email, substr(phone_number,1,3) || '-' || substr(phone_number,4,3) || '-' || substr(phone_number,7,4) as phone,
           addressline1 as address, city, statecode as state, zip_code as zip, GPA, 'SFA' as data_source
FROM new_lj_students;
    
CREATE OR REPLACE VIEW UT_Student_View AS 
SELECT s.UTEID as student_eid, s.first_name, s.last_name, s.classification, s.date_of_birth as birthdate, s.email, 
s.phone, a.address_line_1 as address, a.city, a.state_region as state, a.zip_postal_code as zip, s.CGPA as GPA, 'UTA' as data_source
FROM student s INNER JOIN student_address_linking sal ON s.uteid = sal.uteid
               INNER JOIN address a ON sal.address_id = a.address_id
WHERE classification IN ('1', '2', '3', '4') AND address_type_code = 'H';


-- 4
create or replace PROCEDURE student_etl_proc 
AS
BEGIN

--Insert new SFA records
    INSERT INTO student_dw
    select sfa.student_eid, sfa.first_name, sfa.last_name, sfa.classification, sfa.birthdate, sfa.email, sfa.phone, sfa.address, sfa.city,
           sfa.state, sfa.zip, sfa.gpa, sfa.data_source
    from sfa_student_view sfa left join student_dw dw
        on sfa.student_eid = dw.student_eid
        and sfa.data_source = dw.data_source
    where dw.student_eid is null;
    
    
-- Insert UT records
    INSERT INTO student_dw
    select ut.student_eid, ut.first_name, ut.last_name, ut.classification, ut.birthdate, ut.email, ut.phone, ut.address, ut.city,
           ut.state, ut.zip, ut.gpa, ut.data_source
    from ut_student_view ut left join student_dw dw
        on ut.student_eid = dw.student_eid
        and ut.data_source = dw.data_source
    where dw.student_eid is null;
    
    
-- Update SFA records
MERGE INTO student_dw dw
        USING sfa_student_view sfa
        ON (dw.student_eid = sfa.student_eid and dw.data_source = 'SFA')
      WHEN MATCHED THEN
        UPDATE SET  dw.first_name = sfa.first_name, 
                    dw.last_name = sfa.last_name,
                    dw.classification = sfa.classification,
                    dw.birthdate = sfa.birthdate,
                    dw.phone = sfa.phone,
                    dw.email = sfa.email,
                    dw.address = sfa.address,
                    dw.city = sfa.city,
                    dw.state = sfa.state,
                    dw.zip = sfa.zip,
                    dw.gpa = sfa.gpa ;
                    
-- Update UT records
MERGE INTO student_dw dw
        USING ut_student_view ut
        ON (dw.student_eid = ut.student_eid and dw.data_source = 'UTA')
      WHEN MATCHED THEN
        UPDATE SET  dw.first_name = ut.first_name, 
                    dw.last_name = ut.last_name,
                    dw.classification = ut.classification,
                    dw.birthdate = ut.birthdate,
                    dw.phone = ut.phone,
                    dw.email = ut.email,
                    dw.address = ut.address,
                    dw.city = ut.city,
                    dw.state = ut.state,
                    dw.zip = ut.zip,
                    dw.gpa = ut.gpa ;         
                    
END;
/



